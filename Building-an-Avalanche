// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Degen is ERC20, Ownable {
    mapping(uint256 => uint256) public itemPrices;

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        _mint(msg.sender, 1000000 * (10 ** decimals())); // Minting 1,000,000 tokens with decimals taken into account
    }
    
    function mint(address account, uint256 amount) public {
        require(msg.sender == owner(), "Only owner can mint new tokens");
        _mint(account, amount);
    }
    
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    function transfer(address to, uint256 amount) public override returns (bool) {
        require(to != address(0), "DGN: transfer to the zero address");
        return super.transfer(to, amount);
    }   
    
    function redeemItems(uint256 itemId, uint256 price) external onlyOwner {
        itemPrices[itemId] = price;
    }
    
    function redeem(uint256 itemId) public {
        uint256 price = itemPrices[itemId];
        require(price > 0, "DGN: Item not available for redemption");
        require(balanceOf(msg.sender) >= price, "DGN: Insufficient balance");
        _burn(msg.sender, price);
    }
}
