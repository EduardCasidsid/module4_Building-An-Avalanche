// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ClothingLine is ERC20, Ownable {

    mapping(uint256 => uint256) public Clothes;

    constructor() ERC20("Clothes", "Size") Ownable(msg.sender) {
        Clothes[1] = 400; // Small
        Clothes[2] = 600; // Medium
        Clothes[3] = 800; // Large
        Clothes[4] = 1000; // Extra Large
       
    }

    function mint(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function transfersize(address _to, uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Transfer Failed: Insufficient balance.");
        approve(msg.sender, _amount);
        transferFrom(msg.sender, _to, _amount);
    }

    function sizes() external pure returns (string memory) {
        string memory saleOptions = " Clothes: {1} Small (400) {2} Medium(600) {3} Large (800) {4} Extra Large (1000)" ;
        return saleOptions;
    }

    function redeem(uint256 _amount) public {
        require( Clothes[_amount] > 0, " Clothes is not enough");
        require(_amount <= 3, " Clothes is not enough.");
        require(balanceOf(msg.sender) >=  Clothes[_amount], "Redeem Failed: Insufficient balance.");
        transfer(owner(),  Clothes[_amount]);
    }
    
    function burn(uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Burn Failed: Insufficient balance.");
        approve(msg.sender, _amount);
        _burn(msg.sender, _amount);
    }

    function getBalance() external view returns (uint256) {
        return this.balanceOf(msg.sender);
    }

    function decimals() override public pure returns (uint8) {
        return 0;
    }
}
